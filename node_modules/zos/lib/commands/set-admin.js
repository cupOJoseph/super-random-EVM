"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_pickby_1 = __importDefault(require("lodash.pickby"));
const set_admin_1 = __importDefault(require("../scripts/set-admin"));
const naming_1 = require("../utils/naming");
const prompt_migration_1 = require("../utils/prompt-migration");
const ConfigVariablesInitializer_1 = __importDefault(require("../models/initializer/ConfigVariablesInitializer"));
const ZosNetworkFile_1 = __importDefault(require("../models/files/ZosNetworkFile"));
const name = 'set-admin';
const signature = `${name} [alias-or-address] [new-admin-address]`;
const description = 'change upgradeability admin of a contract instance. Provide the [alias] or [package]/[alias] of the contract to change the ownership of all its instances, or its [address] to change a single one. Note that if you transfer to an incorrect address, you may irreversibly lose control over upgrading your contract.';
const register = (program) => program
    .command(signature, undefined, { noHelp: true })
    .usage('[alias-or-address] [new-admin-address] --network <network> [options]')
    .description(description)
    .option('-y, --yes', 'accept transferring admin rights (required)')
    .withNetworkOptions()
    .action(action);
function action(contractFullNameOrAddress, newAdmin, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { network, txParams } = yield ConfigVariablesInitializer_1.default.initNetworkConfiguration(options);
        const zosversion = yield ZosNetworkFile_1.default.getZosversion(network);
        if (!(yield prompt_migration_1.hasToMigrateProject(zosversion)))
            process.exit(0);
        const { yes } = options;
        if (!yes) {
            throw Error('This is a potentially irreversible operation: if you specify an incorrect admin address, you may lose the ability to upgrade your contract forever.\nPlease double check all parameters, and run the same command with --yes.');
        }
        let proxyAddress;
        let contractAlias;
        let packageName;
        if (contractFullNameOrAddress && contractFullNameOrAddress.startsWith('0x')) {
            proxyAddress = contractFullNameOrAddress;
        }
        else if (contractFullNameOrAddress) {
            ({ contract: contractAlias, package: packageName } = naming_1.fromContractFullName(contractFullNameOrAddress));
        }
        const args = lodash_pickby_1.default({ contractAlias, packageName, proxyAddress, newAdmin });
        yield set_admin_1.default(Object.assign({}, args, { network, txParams }));
        if (!options.dontExitProcess && process.env.NODE_ENV !== 'test')
            process.exit(0);
    });
}
exports.default = { name, signature, description, register, action };
//# sourceMappingURL=set-admin.js.map