"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const push_1 = __importDefault(require("./push"));
const init_1 = __importDefault(require("../scripts/init"));
const name = 'init';
const signature = `${name} <project-name> [version]`;
const description = `initialize your ZeppelinOS project. Provide a <project-name> and optionally an initial [version] name`;
const register = (program) => program
    .command(signature, undefined, { noHelp: true })
    .usage('<project-name> [version]')
    .description(description)
    .option('--publish', 'automatically publishes your project upon pushing it to a network')
    .option('--force', 'overwrite existing project if there is one')
    .option('--link <dependency>', 'link to a dependency')
    .option('--no-install', 'skip installing packages dependencies locally')
    .withPushOptions()
    .action(action);
function action(pName, version, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { publish, force, link, install: installDependencies } = options;
        const dependencies = link ? link.split(',') : [];
        yield init_1.default({ name: pName, version, dependencies, installDependencies, force, publish });
        yield push_1.default.tryAction(options);
    });
}
exports.default = { name, signature, description, register, action };
//# sourceMappingURL=init.js.map