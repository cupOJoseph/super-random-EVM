"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_omit_1 = __importDefault(require("lodash.omit"));
const lodash_isstring_1 = __importDefault(require("lodash.isstring"));
const push_1 = __importDefault(require("../scripts/push"));
const Compiler_1 = __importDefault(require("../models/compiler/Compiler"));
const ConfigVariablesInitializer_1 = __importDefault(require("../models/initializer/ConfigVariablesInitializer"));
const name = 'push';
const signature = name;
const description = 'deploys your project to the specified <network>';
const register = (program) => program
    .command(signature, undefined, { noHelp: true })
    .description(description)
    .usage('--network <network> [options]')
    .option('--skip-compile', 'skips contract compilation')
    .option('-d, --deploy-dependencies', 'deploys dependencies to the network if there is no existing deployment')
    .option('--reset', 'redeploys all contracts (not only the ones that changed)')
    .option('-f, --force', 'ignores validation errors and deploys contracts')
    .withNetworkOptions()
    .action(action);
function action(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { deployDependencies, force, reset: reupload } = options;
        if (!options.skipCompile)
            yield Compiler_1.default.call();
        const { network, txParams } = yield ConfigVariablesInitializer_1.default.initNetworkConfiguration(options);
        yield push_1.default({ force, deployDependencies, reupload, network, txParams });
        if (!options.dontExitProcess && process.env.NODE_ENV !== 'test')
            process.exit(0);
    });
}
function tryAction(externalOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!externalOptions.push)
            return;
        const options = lodash_omit_1.default(externalOptions, 'push');
        const network = lodash_isstring_1.default(externalOptions.push) ? externalOptions.push : undefined;
        if (network)
            options.network = network;
        return action(options);
    });
}
exports.default = { name, signature, description, register, action, tryAction };
//# sourceMappingURL=push.js.map