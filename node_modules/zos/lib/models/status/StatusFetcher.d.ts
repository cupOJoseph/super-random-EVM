import ZosNetworkFile from '../files/ZosNetworkFile';
import { ComparedObject } from './StatusComparator';
export default class StatusFetcher {
    networkFile: ZosNetworkFile;
    constructor(networkFile: any);
    onEndChecking(): void;
    onMismatchingVersion(expected: string, observed: string): void;
    onMismatchingPackage(expected: string, observed: string): void;
    onMismatchingProvider(expected: string, observed: string): void;
    onUnregisteredLocalImplementation(expected: string, observed: string, { alias, address }: ComparedObject): void;
    onMissingRemoteImplementation(expected: string, observed: string, { alias, address }: ComparedObject): Promise<void>;
    onMismatchingImplementationAddress(expected: string, observed: string, { alias, address }: ComparedObject): void;
    onMismatchingImplementationBodyBytecode(expected: string, observed: string, { alias, address, bodyBytecodeHash }: ComparedObject): void;
    onUnregisteredLocalProxy(expected: string, observed: string, { packageName, alias, address, implementation }: ComparedObject): void;
    onMissingRemoteProxy(expected: string, observed: string, { packageName, alias, address, implementation }: ComparedObject): void;
    onMismatchingProxyAlias(expected: string, observed: string, { packageName, address, version, implementation }: ComparedObject): void;
    onMismatchingProxyImplementation(expected: string, observed: string, { packageName, address, version, implementation, alias }: ComparedObject): void;
    onUnregisteredProxyImplementation(expected: string, observed: string, { address, implementation }: ComparedObject): void;
    onMultipleProxyImplementations(expected: string, observed: string, { implementation }: ComparedObject): void;
    onMissingDependency(expected: string, observed: string, { name, address, version }: ComparedObject): void;
    onMismatchingDependencyAddress(expected: string, observed: string, { name, address }: ComparedObject): void;
    onMismatchingDependencyVersion(expected: string, observed: string, { name, version }: ComparedObject): void;
    onUnregisteredDependency(expected: string, observed: string, { name, package: packageAddress }: ComparedObject): void;
}
