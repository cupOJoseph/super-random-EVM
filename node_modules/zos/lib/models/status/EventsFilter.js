"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const zos_lib_1 = require("zos-lib");
const log = new zos_lib_1.Logger('EventsFilter');
const TIMEOUT_ERROR = 'Event filter promise timed out';
class EventsFilter {
    constructor(timeout) {
        this.timeout = timeout || (process.env.NODE_ENV === 'test' ? 2000 : 60000);
    }
    call(contract, eventName = 'allEvents') {
        return __awaiter(this, void 0, void 0, function* () {
            log.info(`Looking for all the '${eventName}' events for contract ${contract.address}`);
            const promise = new Promise((resolve, reject) => {
                contract.getPastEvents(eventName, { fromBlock: 0, toBlock: 'latest' }, (error, events) => {
                    if (error)
                        reject(error);
                    else
                        resolve(events);
                });
            });
            return this._promiseTimeout(promise);
        });
    }
    _promiseTimeout(promise) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const timer = setTimeout(() => {
                    clearTimeout(timer);
                    reject(TIMEOUT_ERROR);
                }, this.timeout);
                promise.then((res) => {
                    clearTimeout(timer);
                    resolve(res);
                }).catch((err) => {
                    clearTimeout(timer);
                    reject(err);
                });
            });
        });
    }
}
exports.default = EventsFilter;
//# sourceMappingURL=EventsFilter.js.map