import StatusReport from './StatusReport';
export interface ComparedObject {
    name?: string;
    address?: string;
    alias?: string;
    bodyBytecodeHash?: string;
    packageName?: string;
    package?: string;
    implementation?: string;
    version?: string;
}
export default class StatusComparator {
    reports: StatusReport[];
    constructor();
    onEndChecking(): void;
    onMismatchingVersion(expected: string, observed: string): void;
    onMismatchingPackage(expected: string, observed: string): void;
    onMismatchingProvider(expected: string, observed: string): void;
    onUnregisteredLocalImplementation(expected: string, observed: string, { alias, address }: ComparedObject): void;
    onMissingRemoteImplementation(expected: string, observed: string, { alias, address }: ComparedObject): Promise<void>;
    onMismatchingImplementationAddress(expected: string, observed: string, { alias, address }: ComparedObject): void;
    onMismatchingImplementationBodyBytecode(expected: string, observed: string, { alias, address, bodyBytecodeHash }: ComparedObject): void;
    onUnregisteredLocalProxy(expected: string, observed: string, { alias, address, implementation }: ComparedObject): void;
    onMissingRemoteProxy(expected: string, observed: string, { alias, address, implementation }: ComparedObject): void;
    onMismatchingProxyAlias(expected: string, observed: string, { address, implementation }: ComparedObject): void;
    onMismatchingProxyImplementation(expected: string, observed: string, { alias, address }: ComparedObject): void;
    onUnregisteredProxyImplementation(expected: string, observed: string, { address, implementation }: ComparedObject): void;
    onMultipleProxyImplementations(expected: string, observed: string, { implementation }: ComparedObject): void;
    onMissingDependency(expected: string, observed: string, { name, address }: ComparedObject): void;
    onMismatchingDependencyAddress(expected: string, observed: string, { name, address }: ComparedObject): void;
    onMismatchingDependencyVersion(expected: string, observed: string, { name, version }: ComparedObject): void;
    onUnregisteredDependency(expected: string, observed: string, { name, package: packageAddress }: ComparedObject): void;
    private _addReport;
}
