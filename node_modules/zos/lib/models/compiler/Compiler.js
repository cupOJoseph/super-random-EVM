"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const zos_lib_1 = require("zos-lib");
const log = new zos_lib_1.Logger('Compiler');
const Compiler = {
    call() {
        return __awaiter(this, void 0, void 0, function* () {
            log.info('Compiling contracts with Truffle...');
            let truffleBin = `${process.cwd()}/node_modules/.bin/truffle`;
            if (!zos_lib_1.FileSystem.exists(truffleBin))
                truffleBin = 'truffle'; // Attempt to load global truffle if local was not found
            return new Promise((resolve, reject) => {
                child_process_1.exec(`${truffleBin} compile --all`, (error, stdout, stderr) => {
                    if (error) {
                        if (error.code === 127)
                            console.error('Could not find truffle executable. Please install it by running: npm install truffle');
                        reject(error);
                    }
                    else {
                        resolve({ stdout, stderr });
                    }
                    if (stdout)
                        console.log(stdout);
                    if (stderr)
                        console.error(stderr);
                });
            });
        });
    }
};
exports.default = Compiler;
//# sourceMappingURL=Compiler.js.map