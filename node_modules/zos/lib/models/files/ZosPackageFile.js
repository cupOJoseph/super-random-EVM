"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_isequal_1 = __importDefault(require("lodash.isequal"));
const lodash_isempty_1 = __importDefault(require("lodash.isempty"));
const zos_lib_1 = require("zos-lib");
const Dependency_1 = __importDefault(require("../dependency/Dependency"));
const ZosVersion_1 = require("./ZosVersion");
const ZosNetworkFile_1 = __importDefault(require("./ZosNetworkFile"));
const log = new zos_lib_1.Logger('ZosPackageFile');
class ZosPackageFile {
    constructor(fileName = 'zos.json') {
        this.fileName = fileName;
        this.data = zos_lib_1.FileSystem.parseJsonIfExists(this.fileName) || { zosversion: ZosVersion_1.ZOS_VERSION };
        ZosVersion_1.checkVersion(this.data.zosversion, this.fileName);
    }
    exists() {
        return zos_lib_1.FileSystem.exists(this.fileName);
    }
    get name() {
        return this.data.name;
    }
    get version() {
        return this.data.version;
    }
    get dependencies() {
        return this.data.dependencies || {};
    }
    get dependenciesNames() {
        return Object.keys(this.dependencies);
    }
    getDependencyVersion(name) {
        return this.dependencies[name];
    }
    hasDependency(name) {
        return !!(this.dependencies[name]);
    }
    hasDependencies() {
        return !lodash_isempty_1.default(this.dependencies);
    }
    get contracts() {
        return this.data.contracts || {};
    }
    get contractAliases() {
        return Object.keys(this.contracts);
    }
    get contractNames() {
        return Object.values(this.contracts);
    }
    get isPublished() {
        return !!this.data.publish;
    }
    contract(alias) {
        return this.contracts[alias];
    }
    hasName(name) {
        return this.name === name;
    }
    dependencyMatches(name, version) {
        return this.hasDependency(name) &&
            Dependency_1.default.satisfiesVersion(version, this.getDependencyVersion(name));
    }
    isCurrentVersion(version) {
        return this.version === version;
    }
    hasContract(alias) {
        return !!this.contract(alias);
    }
    hasContracts() {
        return !lodash_isempty_1.default(this.contracts);
    }
    set zosversion(version) {
        this.data.zosversion = version;
    }
    set publish(publish) {
        this.data.publish = !!publish;
    }
    set name(name) {
        this.data.name = name;
    }
    set version(version) {
        this.data.version = version;
    }
    set contracts(contracts) {
        this.data.contracts = contracts;
    }
    setDependency(name, version) {
        if (!this.data.dependencies)
            this.data.dependencies = {};
        this.data.dependencies[name] = version;
    }
    unsetDependency(name) {
        if (!this.data.dependencies)
            return;
        delete this.data.dependencies[name];
    }
    addContract(alias, name) {
        this.data.contracts[alias] = name || alias;
    }
    unsetContract(alias) {
        delete this.data.contracts[alias];
    }
    networkFile(network) {
        const networkFileName = this.fileName.replace(/\.json\s*$/, `.${network}.json`);
        if (networkFileName === this.fileName)
            throw Error(`Cannot create network file name from ${this.fileName}`);
        return new ZosNetworkFile_1.default(this, network, networkFileName);
    }
    write() {
        if (this.hasChanged()) {
            const exists = this.exists();
            zos_lib_1.FileSystem.writeJson(this.fileName, this.data);
            exists ? log.info(`Updated ${this.fileName}`) : log.info(`Created ${this.fileName}`);
        }
    }
    hasChanged() {
        const currentPackgeFile = zos_lib_1.FileSystem.parseJsonIfExists(this.fileName);
        return !lodash_isequal_1.default(this.data, currentPackgeFile);
    }
}
exports.default = ZosPackageFile;
//# sourceMappingURL=ZosPackageFile.js.map