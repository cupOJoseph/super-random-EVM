import { Contract } from 'zos-lib';
import { ProxyAdminProject, AppProject, BuildArtifacts } from 'zos-lib';
import { App } from 'zos-lib';
import { AppProjectDeployer, ProxyAdminProjectDeployer } from './ProjectDeployer';
import LocalController from '../local/LocalController';
import ZosNetworkFile, { ProxyInterface } from '../files/ZosNetworkFile';
import ZosPackageFile from '../files/ZosPackageFile';
declare type Project = ProxyAdminProject | AppProject;
declare type ProjectDeployer = ProxyAdminProjectDeployer | AppProjectDeployer;
export default class NetworkController {
    localController: LocalController;
    txParams: any;
    network: string;
    networkFile: ZosNetworkFile;
    project: Project;
    constructor(localController: LocalController, network: string, txParams: any, networkFile?: ZosNetworkFile);
    readonly packageFile: ZosPackageFile;
    readonly packageVersion: string;
    readonly currentVersion: string;
    readonly currentZosversion: string;
    readonly packageAddress: string;
    readonly proxyAdminAddress: string;
    checkNotFrozen(): void | never;
    compareCurrentStatus(): Promise<void | never>;
    pullRemoteStatus(): Promise<void | never>;
    fetchOrDeploy(requestedVersion: string): Promise<Project>;
    push(reupload?: boolean, force?: boolean): Promise<void | never>;
    private _checkVersion;
    private _newVersionRequired;
    private _contractsListForPush;
    private _solidityLibsForPush;
    uploadSolidityLibs(libs: Contract[]): Promise<void>;
    private _uploadSolidityLib;
    uploadContracts(contracts: Array<[string, Contract]>): Promise<void>;
    uploadContract(contractAlias: string, contract: Contract): Promise<void | never>;
    private _setSolidityLibs;
    private _unsetSolidityLibs;
    private _unsetSolidityLib;
    private _hasChangedLibraries;
    private _getAllSolidityLibNames;
    unsetContracts(): Promise<void>;
    unsetContract(contractAlias: string): Promise<void | never>;
    validateContracts(contracts: Array<[string, Contract]>, buildArtifacts: BuildArtifacts): boolean;
    validateContract(contractAlias: string, contract: Contract, buildArtifacts: BuildArtifacts): boolean;
    checkContractDeployed(packageName: string, contractAlias: string, throwIfFail?: boolean): void;
    checkLocalContractsDeployed(throwIfFail?: boolean): void;
    private _errorForLocalContractsDeployed;
    checkLocalContractDeployed(contractAlias: string, throwIfFail?: boolean): void;
    private _errorForLocalContractDeployed;
    private _handleErrorMessage;
    private _hasSolidityLibChanged;
    hasContractChanged(contractAlias: string, contract?: Contract): boolean;
    isLocalContract(contractAlias: string): boolean;
    isContractDefined(contractAlias: string): boolean;
    isContractDeployed(contractAlias: string): boolean;
    verifyAndPublishContract(contractAlias: string, optimizer: boolean, optimizerRuns: string, remote: string, apiKey: string): Promise<void>;
    writeNetworkPackageIfNeeded(): void;
    freeze(): Promise<void | never>;
    readonly isPublished: boolean;
    getDeployer(requestedVersion: string): ProjectDeployer;
    readonly appAddress: string;
    readonly app: App | null;
    private _migrate;
    private _migrateZosversionIfNeeded;
    publish(): Promise<void>;
    createProxy(packageName: string, contractAlias: string, initMethod: string, initArgs: string[]): Promise<Contract>;
    private _tryRegisterProxyAdmin;
    checkInitialization(contract: Contract, calledInitMethod: string, calledInitArgs: string[]): void;
    private _updateTruffleDeployedInformation;
    setProxiesAdmin(packageName: string, contractAlias: string, proxyAddress: string, newAdmin: string): Promise<ProxyInterface[]>;
    private _changeProxiesAdmin;
    upgradeProxies(packageName: string, contractAlias: string, proxyAddress: string, initMethod: string, initArgs: string[]): Promise<ProxyInterface[]>;
    private _upgradeProxy;
    private _checkUpgrade;
    private _fetchOwnedProxies;
    deployDependencies(): Promise<void>;
    deployDependencyIfNeeded(depName: string, depVersion: string): Promise<void | never>;
    handleDependenciesLink(): Promise<void>;
    unlinkDependency(depName: string): Promise<void | never>;
    linkDependency(depName: string, depVersion: string): Promise<boolean | void | never>;
    private _errorForContractDeployed;
    private updateZosVersions;
}
export {};
