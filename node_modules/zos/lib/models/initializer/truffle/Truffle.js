"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_pickby_1 = __importDefault(require("lodash.pickby"));
const lodash_pick_1 = __importDefault(require("lodash.pick"));
const zos_lib_1 = require("zos-lib");
const Truffle = {
    existsTruffleConfig(root = process.cwd()) {
        const truffleFile = `${root}/truffle.js`;
        const truffleConfigFile = `${root}/truffle-config.js`;
        return zos_lib_1.FileSystem.exists(truffleFile) || zos_lib_1.FileSystem.exists(truffleConfigFile);
    },
    isTruffleProject(root = process.cwd()) {
        const truffleDir = `${root}/node_modules/truffle`;
        const existsTruffleDependency = zos_lib_1.FileSystem.exists(truffleDir);
        return Truffle.existsTruffleConfig(root) && existsTruffleDependency;
    },
    validateAndLoadNetworkConfig(network, force = false) {
        const config = this.getConfig(force);
        const { networks: networkList } = config;
        if (!networkList[network])
            throw Error(`Given network '${network}' is not defined in your truffle-config file`);
        config.network = network;
    },
    getBuildDir() {
        const config = this.getConfig();
        return config.contracts_build_directory;
    },
    getProviderAndDefaults() {
        const config = this.getConfig();
        const provider = this._setNonceTrackerIfNeeded(config);
        const artifactDefaults = this._getArtifactDefaults(config);
        return { provider, artifactDefaults };
    },
    getConfig(force = false) {
        if (!force && this.config)
            return this.config;
        try {
            const TruffleConfig = require('truffle-config');
            this.config = TruffleConfig.detect({ logger: console });
            return this.config;
        }
        catch (error) {
            if (error.message === 'Could not find suitable configuration file.') {
                throw Error('Could not find truffle.js config file, remember to initialize your project.');
            }
            else {
                throw Error('Could not load truffle.js config file.\n' + error);
            }
        }
    },
    // This function fixes a truffle issue related to HDWalletProvider that occurs when assigning
    // the network provider as a function (that returns an HDWalletProvider instance) instead of
    // assigning the HDWalletProvider instance directly.
    // (see https://github.com/trufflesuite/truffle-hdwallet-provider/issues/65)
    _setNonceTrackerIfNeeded({ provider }) {
        const { engine } = provider;
        if (engine && engine.constructor.name === 'Web3ProviderEngine') {
            const NonceSubprovider = require('web3-provider-engine/subproviders/nonce-tracker');
            const nonceTracker = new NonceSubprovider();
            engine._providers.forEach((aProvider, index) => {
                if (aProvider.constructor.name === 'ProviderSubprovider') {
                    nonceTracker.setEngine(engine);
                    engine._providers.splice(index, 0, nonceTracker);
                }
            });
        }
        return provider;
    },
    _getArtifactDefaults(config) {
        const network = config.network;
        const rawConfig = require(require('truffle-config').search()) || {};
        const networks = rawConfig.networks || {};
        const networkConfig = networks[network];
        const configDefaults = lodash_pickby_1.default(lodash_pick_1.default(this.config, 'from', 'gasPrice'));
        const networkDefaults = lodash_pickby_1.default(lodash_pick_1.default(networkConfig, 'from', 'gas', 'gasPrice'));
        return Object.assign({}, configDefaults, networkDefaults);
    },
};
exports.default = Truffle;
//# sourceMappingURL=Truffle.js.map