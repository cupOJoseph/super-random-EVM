"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const zos_lib_1 = require("zos-lib");
const Truffle_1 = __importDefault(require("./truffle/Truffle"));
const Session_1 = __importDefault(require("../network/Session"));
const ConfigVariablesInitializer = {
    initStaticConfiguration() {
        const buildDir = Truffle_1.default.getBuildDir();
        zos_lib_1.Contracts.setLocalBuildDir(buildDir);
    },
    initNetworkConfiguration(options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.initStaticConfiguration();
            const { network, from, timeout } = Session_1.default.getOptions(options);
            if (!network)
                throw Error('A network name must be provided to execute the requested action.');
            // these lines could be expanded to support different libraries like embark, ethjs, buidler, etc
            Truffle_1.default.validateAndLoadNetworkConfig(network);
            const { provider, artifactDefaults } = Truffle_1.default.getProviderAndDefaults();
            zos_lib_1.ZWeb3.initialize(provider);
            zos_lib_1.Contracts.setSyncTimeout(timeout * 1000);
            zos_lib_1.Contracts.setArtifactsDefaults(artifactDefaults);
            const txParams = { from: zos_lib_1.ZWeb3.toChecksumAddress(from || artifactDefaults.from || (yield zos_lib_1.ZWeb3.defaultAccount())) };
            return { network: yield zos_lib_1.ZWeb3.getNetworkName(), txParams };
        });
    }
};
exports.default = ConfigVariablesInitializer;
//# sourceMappingURL=ConfigVariablesInitializer.js.map